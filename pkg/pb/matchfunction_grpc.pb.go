// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.0
// source: api/matchfunction.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MatchFunction_Run_FullMethodName = "/openmatch.MatchFunction/Run"
)

// MatchFunctionClient is the client API for MatchFunction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The MatchFunction service implements APIs to run user-defined matchmaking logics.
type MatchFunctionClient interface {
	// DO NOT CALL THIS FUNCTION MANUALLY. USE backend.FetchMatches INSTEAD.
	// Run pulls Tickets that satisfy Profile constraints from QueryService,
	// runs matchmaking logic against them, then constructs and streams back
	// match candidates to the Backend service.
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunResponse], error)
}

type matchFunctionClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchFunctionClient(cc grpc.ClientConnInterface) MatchFunctionClient {
	return &matchFunctionClient{cc}
}

func (c *matchFunctionClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MatchFunction_ServiceDesc.Streams[0], MatchFunction_Run_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RunRequest, RunResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MatchFunction_RunClient = grpc.ServerStreamingClient[RunResponse]

// MatchFunctionServer is the server API for MatchFunction service.
// All implementations should embed UnimplementedMatchFunctionServer
// for forward compatibility.
//
// The MatchFunction service implements APIs to run user-defined matchmaking logics.
type MatchFunctionServer interface {
	// DO NOT CALL THIS FUNCTION MANUALLY. USE backend.FetchMatches INSTEAD.
	// Run pulls Tickets that satisfy Profile constraints from QueryService,
	// runs matchmaking logic against them, then constructs and streams back
	// match candidates to the Backend service.
	Run(*RunRequest, grpc.ServerStreamingServer[RunResponse]) error
}

// UnimplementedMatchFunctionServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchFunctionServer struct{}

func (UnimplementedMatchFunctionServer) Run(*RunRequest, grpc.ServerStreamingServer[RunResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedMatchFunctionServer) testEmbeddedByValue() {}

// UnsafeMatchFunctionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchFunctionServer will
// result in compilation errors.
type UnsafeMatchFunctionServer interface {
	mustEmbedUnimplementedMatchFunctionServer()
}

func RegisterMatchFunctionServer(s grpc.ServiceRegistrar, srv MatchFunctionServer) {
	// If the following call pancis, it indicates UnimplementedMatchFunctionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MatchFunction_ServiceDesc, srv)
}

func _MatchFunction_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchFunctionServer).Run(m, &grpc.GenericServerStream[RunRequest, RunResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MatchFunction_RunServer = grpc.ServerStreamingServer[RunResponse]

// MatchFunction_ServiceDesc is the grpc.ServiceDesc for MatchFunction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchFunction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openmatch.MatchFunction",
	HandlerType: (*MatchFunctionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _MatchFunction_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/matchfunction.proto",
}
