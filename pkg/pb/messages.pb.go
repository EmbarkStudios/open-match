// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.24.0
// source: api/messages.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DoubleRangeFilter_Exclude int32

const (
	// No bounds should be excluded when evaluating the filter, i.e.: MIN <= x <= MAX
	DoubleRangeFilter_NONE DoubleRangeFilter_Exclude = 0
	// Only the minimum bound should be excluded when evaluating the filter, i.e.: MIN < x <= MAX
	DoubleRangeFilter_MIN DoubleRangeFilter_Exclude = 1
	// Only the maximum bound should be excluded when evaluating the filter, i.e.: MIN <= x < MAX
	DoubleRangeFilter_MAX DoubleRangeFilter_Exclude = 2
	// Both bounds should be excluded when evaluating the filter, i.e.: MIN < x < MAX
	DoubleRangeFilter_BOTH DoubleRangeFilter_Exclude = 3
)

// Enum value maps for DoubleRangeFilter_Exclude.
var (
	DoubleRangeFilter_Exclude_name = map[int32]string{
		0: "NONE",
		1: "MIN",
		2: "MAX",
		3: "BOTH",
	}
	DoubleRangeFilter_Exclude_value = map[string]int32{
		"NONE": 0,
		"MIN":  1,
		"MAX":  2,
		"BOTH": 3,
	}
)

func (x DoubleRangeFilter_Exclude) Enum() *DoubleRangeFilter_Exclude {
	p := new(DoubleRangeFilter_Exclude)
	*p = x
	return p
}

func (x DoubleRangeFilter_Exclude) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DoubleRangeFilter_Exclude) Descriptor() protoreflect.EnumDescriptor {
	return file_api_messages_proto_enumTypes[0].Descriptor()
}

func (DoubleRangeFilter_Exclude) Type() protoreflect.EnumType {
	return &file_api_messages_proto_enumTypes[0]
}

func (x DoubleRangeFilter_Exclude) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DoubleRangeFilter_Exclude.Descriptor instead.
func (DoubleRangeFilter_Exclude) EnumDescriptor() ([]byte, []int) {
	return file_api_messages_proto_rawDescGZIP(), []int{3, 0}
}

// A Ticket is a basic matchmaking entity in Open Match. A Ticket may represent
// an individual 'Player', a 'Group' of players, or any other concepts unique to
// your use case. Open Match will not interpret what the Ticket represents but
// just treat it as a matchmaking unit with a set of SearchFields. Open Match
// stores the Ticket in state storage and enables an Assignment to be set on the
// Ticket.
type Ticket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id represents an auto-generated Id issued by Open Match.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// An Assignment represents a game server assignment associated with a Ticket,
	// or whatever finalized matched state means for your use case.
	// Open Match does not require or inspect any fields on Assignment.
	Assignment *Assignment `protobuf:"bytes,3,opt,name=assignment,proto3" json:"assignment,omitempty"`
	// Search fields are the fields which Open Match is aware of, and can be used
	// when specifying filters.
	SearchFields *SearchFields `protobuf:"bytes,4,opt,name=search_fields,json=searchFields,proto3" json:"search_fields,omitempty"`
	// Customized information not inspected by Open Match, to be used by the match
	// making function, evaluator, and components making calls to Open Match.
	// Optional, depending on the requirements of the connected systems.
	Extensions map[string]*anypb.Any `protobuf:"bytes,5,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Customized information not inspected by Open Match, to be kept persistent
	// throughout the life-cycle of a ticket.
	// Optional, depending on the requirements of the connected systems.
	PersistentField map[string]*anypb.Any `protobuf:"bytes,6,rep,name=persistent_field,json=persistentField,proto3" json:"persistent_field,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Create time is the time the Ticket was created. It is populated by Open
	// Match at the time of Ticket creation.
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	mi := &file_api_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_api_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_api_messages_proto_rawDescGZIP(), []int{0}
}

func (x *Ticket) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ticket) GetAssignment() *Assignment {
	if x != nil {
		return x.Assignment
	}
	return nil
}

func (x *Ticket) GetSearchFields() *SearchFields {
	if x != nil {
		return x.SearchFields
	}
	return nil
}

func (x *Ticket) GetExtensions() map[string]*anypb.Any {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *Ticket) GetPersistentField() map[string]*anypb.Any {
	if x != nil {
		return x.PersistentField
	}
	return nil
}

func (x *Ticket) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

// Search fields are the fields which Open Match is aware of, and can be used
// when specifying filters.
type SearchFields struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Float arguments.  Filterable on ranges.
	DoubleArgs map[string]float64 `protobuf:"bytes,1,rep,name=double_args,json=doubleArgs,proto3" json:"double_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	// String arguments.  Filterable on equality.
	StringArgs map[string]string `protobuf:"bytes,2,rep,name=string_args,json=stringArgs,proto3" json:"string_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Filterable on presence or absence of given value.
	Tags          []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchFields) Reset() {
	*x = SearchFields{}
	mi := &file_api_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFields) ProtoMessage() {}

func (x *SearchFields) ProtoReflect() protoreflect.Message {
	mi := &file_api_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFields.ProtoReflect.Descriptor instead.
func (*SearchFields) Descriptor() ([]byte, []int) {
	return file_api_messages_proto_rawDescGZIP(), []int{1}
}

func (x *SearchFields) GetDoubleArgs() map[string]float64 {
	if x != nil {
		return x.DoubleArgs
	}
	return nil
}

func (x *SearchFields) GetStringArgs() map[string]string {
	if x != nil {
		return x.StringArgs
	}
	return nil
}

func (x *SearchFields) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// An Assignment represents a game server assignment associated with a Ticket.
// Open Match does not require or inspect any fields on assignment.
type Assignment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Connection information for this Assignment.
	Connection string `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	// Customized information not inspected by Open Match, to be used by the match
	// making function, evaluator, and components making calls to Open Match.
	// Optional, depending on the requirements of the connected systems.
	Extensions    map[string]*anypb.Any `protobuf:"bytes,4,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Assignment) Reset() {
	*x = Assignment{}
	mi := &file_api_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment) ProtoMessage() {}

func (x *Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_api_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment.ProtoReflect.Descriptor instead.
func (*Assignment) Descriptor() ([]byte, []int) {
	return file_api_messages_proto_rawDescGZIP(), []int{2}
}

func (x *Assignment) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *Assignment) GetExtensions() map[string]*anypb.Any {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// Filters numerical values to only those within a range.
//
//	double_arg: "foo"
//	max: 10
//	min: 5
//
// matches:
//
//	{"foo": 5}
//	{"foo": 7.5}
//	{"foo": 10}
//
// does not match:
//
//	{"foo": 4}
//	{"foo": 10.01}
//	{"foo": "7.5"}
//	{}
type DoubleRangeFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the ticket's search_fields.double_args this Filter operates on.
	DoubleArg string `protobuf:"bytes,1,opt,name=double_arg,json=doubleArg,proto3" json:"double_arg,omitempty"`
	// Maximum value.
	Max float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"`
	// Minimum value.
	Min float64 `protobuf:"fixed64,3,opt,name=min,proto3" json:"min,omitempty"`
	// Defines the bounds to apply when filtering tickets by their search_fields.double_args value.
	// BETA FEATURE WARNING: This field and the associated values are
	// not finalized and still subject to possible change or removal.
	Exclude       DoubleRangeFilter_Exclude `protobuf:"varint,4,opt,name=exclude,proto3,enum=openmatch.DoubleRangeFilter_Exclude" json:"exclude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DoubleRangeFilter) Reset() {
	*x = DoubleRangeFilter{}
	mi := &file_api_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoubleRangeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleRangeFilter) ProtoMessage() {}

func (x *DoubleRangeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleRangeFilter.ProtoReflect.Descriptor instead.
func (*DoubleRangeFilter) Descriptor() ([]byte, []int) {
	return file_api_messages_proto_rawDescGZIP(), []int{3}
}

func (x *DoubleRangeFilter) GetDoubleArg() string {
	if x != nil {
		return x.DoubleArg
	}
	return ""
}

func (x *DoubleRangeFilter) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *DoubleRangeFilter) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *DoubleRangeFilter) GetExclude() DoubleRangeFilter_Exclude {
	if x != nil {
		return x.Exclude
	}
	return DoubleRangeFilter_NONE
}

// Filters strings exactly equaling a value.
//
//	string_arg: "foo"
//	value: "bar"
//
// matches:
//
//	{"foo": "bar"}
//
// does not match:
//
//	{"foo": "baz"}
//	{"bar": "foo"}
//	{}
type StringEqualsFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the ticket's search_fields.string_args this Filter operates on.
	StringArg     string `protobuf:"bytes,1,opt,name=string_arg,json=stringArg,proto3" json:"string_arg,omitempty"`
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringEqualsFilter) Reset() {
	*x = StringEqualsFilter{}
	mi := &file_api_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringEqualsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringEqualsFilter) ProtoMessage() {}

func (x *StringEqualsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringEqualsFilter.ProtoReflect.Descriptor instead.
func (*StringEqualsFilter) Descriptor() ([]byte, []int) {
	return file_api_messages_proto_rawDescGZIP(), []int{4}
}

func (x *StringEqualsFilter) GetStringArg() string {
	if x != nil {
		return x.StringArg
	}
	return ""
}

func (x *StringEqualsFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Filters to the tag being present on the search_fields.
//
//	tag: "foo"
//
// matches:
//
//	["foo"]
//	["bar","foo"]
//
// does not match:
//
//	["bar"]
//	[]
type TagPresentFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           string                 `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagPresentFilter) Reset() {
	*x = TagPresentFilter{}
	mi := &file_api_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagPresentFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagPresentFilter) ProtoMessage() {}

func (x *TagPresentFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagPresentFilter.ProtoReflect.Descriptor instead.
func (*TagPresentFilter) Descriptor() ([]byte, []int) {
	return file_api_messages_proto_rawDescGZIP(), []int{5}
}

func (x *TagPresentFilter) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// Pool specfies a set of criteria that are used to select a subset of Tickets
// that meet all the criteria.
type Pool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A developer-chosen human-readable name for this Pool.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Set of Filters indicating the filtering criteria. Selected tickets must
	// match every Filter.
	DoubleRangeFilters  []*DoubleRangeFilter  `protobuf:"bytes,2,rep,name=double_range_filters,json=doubleRangeFilters,proto3" json:"double_range_filters,omitempty"`
	StringEqualsFilters []*StringEqualsFilter `protobuf:"bytes,4,rep,name=string_equals_filters,json=stringEqualsFilters,proto3" json:"string_equals_filters,omitempty"`
	TagPresentFilters   []*TagPresentFilter   `protobuf:"bytes,5,rep,name=tag_present_filters,json=tagPresentFilters,proto3" json:"tag_present_filters,omitempty"`
	// If specified, only Tickets created before the specified time are selected.
	CreatedBefore *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_before,json=createdBefore,proto3" json:"created_before,omitempty"`
	// If specified, only Tickets created after the specified time are selected.
	CreatedAfter  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_after,json=createdAfter,proto3" json:"created_after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pool) Reset() {
	*x = Pool{}
	mi := &file_api_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

func (x *Pool) ProtoReflect() protoreflect.Message {
	mi := &file_api_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_api_messages_proto_rawDescGZIP(), []int{6}
}

func (x *Pool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pool) GetDoubleRangeFilters() []*DoubleRangeFilter {
	if x != nil {
		return x.DoubleRangeFilters
	}
	return nil
}

func (x *Pool) GetStringEqualsFilters() []*StringEqualsFilter {
	if x != nil {
		return x.StringEqualsFilters
	}
	return nil
}

func (x *Pool) GetTagPresentFilters() []*TagPresentFilter {
	if x != nil {
		return x.TagPresentFilters
	}
	return nil
}

func (x *Pool) GetCreatedBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedBefore
	}
	return nil
}

func (x *Pool) GetCreatedAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAfter
	}
	return nil
}

// A MatchProfile is Open Match's representation of a Match specification. It is
// used to indicate the criteria for selecting players for a match. A
// MatchProfile is the input to the API to get matches and is passed to the
// MatchFunction. It contains all the information required by the MatchFunction
// to generate match proposals.
type MatchProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of this match profile.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Set of pools to be queried when generating a match for this MatchProfile.
	Pools []*Pool `protobuf:"bytes,3,rep,name=pools,proto3" json:"pools,omitempty"`
	// Customized information not inspected by Open Match, to be used by the match
	// making function, evaluator, and components making calls to Open Match.
	// Optional, depending on the requirements of the connected systems.
	Extensions    map[string]*anypb.Any `protobuf:"bytes,5,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchProfile) Reset() {
	*x = MatchProfile{}
	mi := &file_api_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchProfile) ProtoMessage() {}

func (x *MatchProfile) ProtoReflect() protoreflect.Message {
	mi := &file_api_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchProfile.ProtoReflect.Descriptor instead.
func (*MatchProfile) Descriptor() ([]byte, []int) {
	return file_api_messages_proto_rawDescGZIP(), []int{7}
}

func (x *MatchProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MatchProfile) GetPools() []*Pool {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *MatchProfile) GetExtensions() map[string]*anypb.Any {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// A Match is used to represent a completed match object. It can be generated by
// a MatchFunction as a proposal or can be returned by OpenMatch as a result in
// response to the FetchMatches call.
// When a match is returned by the FetchMatches call, it should contain at least
// one ticket to be considered as valid.
type Match struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A Match ID that should be passed through the stack for tracing.
	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	// Name of the match profile that generated this Match.
	MatchProfile string `protobuf:"bytes,2,opt,name=match_profile,json=matchProfile,proto3" json:"match_profile,omitempty"`
	// Name of the match function that generated this Match.
	MatchFunction string `protobuf:"bytes,3,opt,name=match_function,json=matchFunction,proto3" json:"match_function,omitempty"`
	// Tickets belonging to this match.
	Tickets []*Ticket `protobuf:"bytes,4,rep,name=tickets,proto3" json:"tickets,omitempty"`
	// Customized information not inspected by Open Match, to be used by the match
	// making function, evaluator, and components making calls to Open Match.
	// Optional, depending on the requirements of the connected systems.
	Extensions map[string]*anypb.Any `protobuf:"bytes,7,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Backfill request which contains additional information to the match
	// and contains an association to a GameServer.
	// BETA FEATURE WARNING: This field is not finalized and still subject
	// to possible change or removal.
	Backfill *Backfill `protobuf:"bytes,8,opt,name=backfill,proto3" json:"backfill,omitempty"`
	// AllocateGameServer signalise Director that Backfill is new and it should
	// allocate a GameServer, this Backfill would be assigned.
	// BETA FEATURE WARNING: This field is not finalized and still subject
	// to possible change or removal.
	AllocateGameserver bool `protobuf:"varint,9,opt,name=allocate_gameserver,json=allocateGameserver,proto3" json:"allocate_gameserver,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Match) Reset() {
	*x = Match{}
	mi := &file_api_messages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_api_messages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_api_messages_proto_rawDescGZIP(), []int{8}
}

func (x *Match) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *Match) GetMatchProfile() string {
	if x != nil {
		return x.MatchProfile
	}
	return ""
}

func (x *Match) GetMatchFunction() string {
	if x != nil {
		return x.MatchFunction
	}
	return ""
}

func (x *Match) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *Match) GetExtensions() map[string]*anypb.Any {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *Match) GetBackfill() *Backfill {
	if x != nil {
		return x.Backfill
	}
	return nil
}

func (x *Match) GetAllocateGameserver() bool {
	if x != nil {
		return x.AllocateGameserver
	}
	return false
}

// Represents a backfill entity which is used to fill partially full matches.
//
// BETA FEATURE WARNING:  This call and the associated Request and Response
// messages are not finalized and still subject to possible change or removal.
type Backfill struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id represents an auto-generated Id issued by Open Match.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Search fields are the fields which Open Match is aware of, and can be used
	// when specifying filters.
	SearchFields *SearchFields `protobuf:"bytes,2,opt,name=search_fields,json=searchFields,proto3" json:"search_fields,omitempty"`
	// Customized information not inspected by Open Match, to be used by
	// the Match Function, evaluator, and components making calls to Open Match.
	// Optional, depending on the requirements of the connected systems.
	Extensions map[string]*anypb.Any `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Customized information not inspected by Open Match, to be kept persistent
	// throughout the life-cycle of a backfill.
	// Optional, depending on the requirements of the connected systems.
	PersistentField map[string]*anypb.Any `protobuf:"bytes,4,rep,name=persistent_field,json=persistentField,proto3" json:"persistent_field,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Create time is the time the Ticket was created. It is populated by Open
	// Match at the time of Ticket creation.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Generation gets incremented on GameServers update operations.
	// Prevents the MMF from overriding a newer version from the game server.
	// Do NOT read or write to this field, it is for internal tracking, and changing the value will cause bugs.
	Generation    int64 `protobuf:"varint,6,opt,name=generation,proto3" json:"generation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Backfill) Reset() {
	*x = Backfill{}
	mi := &file_api_messages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backfill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backfill) ProtoMessage() {}

func (x *Backfill) ProtoReflect() protoreflect.Message {
	mi := &file_api_messages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backfill.ProtoReflect.Descriptor instead.
func (*Backfill) Descriptor() ([]byte, []int) {
	return file_api_messages_proto_rawDescGZIP(), []int{9}
}

func (x *Backfill) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Backfill) GetSearchFields() *SearchFields {
	if x != nil {
		return x.SearchFields
	}
	return nil
}

func (x *Backfill) GetExtensions() map[string]*anypb.Any {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *Backfill) GetPersistentField() map[string]*anypb.Any {
	if x != nil {
		return x.PersistentField
	}
	return nil
}

func (x *Backfill) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Backfill) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

var File_api_messages_proto protoreflect.FileDescriptor

const file_api_messages_proto_rawDesc = "" +
	"\n" +
	"\x12api/messages.proto\x12\topenmatch\x1a\x17google/rpc/status.proto\x1a\x19google/protobuf/any.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x95\x04\n" +
	"\x06Ticket\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x125\n" +
	"\n" +
	"assignment\x18\x03 \x01(\v2\x15.openmatch.AssignmentR\n" +
	"assignment\x12<\n" +
	"\rsearch_fields\x18\x04 \x01(\v2\x17.openmatch.SearchFieldsR\fsearchFields\x12A\n" +
	"\n" +
	"extensions\x18\x05 \x03(\v2!.openmatch.Ticket.ExtensionsEntryR\n" +
	"extensions\x12Q\n" +
	"\x10persistent_field\x18\x06 \x03(\v2&.openmatch.Ticket.PersistentFieldEntryR\x0fpersistentField\x12;\n" +
	"\vcreate_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x1aS\n" +
	"\x0fExtensionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01\x1aX\n" +
	"\x14PersistentFieldEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01J\x04\b\x02\x10\x03\"\xb4\x02\n" +
	"\fSearchFields\x12H\n" +
	"\vdouble_args\x18\x01 \x03(\v2'.openmatch.SearchFields.DoubleArgsEntryR\n" +
	"doubleArgs\x12H\n" +
	"\vstring_args\x18\x02 \x03(\v2'.openmatch.SearchFields.StringArgsEntryR\n" +
	"stringArgs\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tags\x1a=\n" +
	"\x0fDoubleArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a=\n" +
	"\x0fStringArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd4\x01\n" +
	"\n" +
	"Assignment\x12\x1e\n" +
	"\n" +
	"connection\x18\x01 \x01(\tR\n" +
	"connection\x12E\n" +
	"\n" +
	"extensions\x18\x04 \x03(\v2%.openmatch.Assignment.ExtensionsEntryR\n" +
	"extensions\x1aS\n" +
	"\x0fExtensionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01J\x04\b\x02\x10\x03J\x04\b\x03\x10\x04\"\xc7\x01\n" +
	"\x11DoubleRangeFilter\x12\x1d\n" +
	"\n" +
	"double_arg\x18\x01 \x01(\tR\tdoubleArg\x12\x10\n" +
	"\x03max\x18\x02 \x01(\x01R\x03max\x12\x10\n" +
	"\x03min\x18\x03 \x01(\x01R\x03min\x12>\n" +
	"\aexclude\x18\x04 \x01(\x0e2$.openmatch.DoubleRangeFilter.ExcludeR\aexclude\"/\n" +
	"\aExclude\x12\b\n" +
	"\x04NONE\x10\x00\x12\a\n" +
	"\x03MIN\x10\x01\x12\a\n" +
	"\x03MAX\x10\x02\x12\b\n" +
	"\x04BOTH\x10\x03\"I\n" +
	"\x12StringEqualsFilter\x12\x1d\n" +
	"\n" +
	"string_arg\x18\x01 \x01(\tR\tstringArg\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"$\n" +
	"\x10TagPresentFilter\x12\x10\n" +
	"\x03tag\x18\x01 \x01(\tR\x03tag\"\x94\x03\n" +
	"\x04Pool\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12N\n" +
	"\x14double_range_filters\x18\x02 \x03(\v2\x1c.openmatch.DoubleRangeFilterR\x12doubleRangeFilters\x12Q\n" +
	"\x15string_equals_filters\x18\x04 \x03(\v2\x1d.openmatch.StringEqualsFilterR\x13stringEqualsFilters\x12K\n" +
	"\x13tag_present_filters\x18\x05 \x03(\v2\x1b.openmatch.TagPresentFilterR\x11tagPresentFilters\x12A\n" +
	"\x0ecreated_before\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\rcreatedBefore\x12?\n" +
	"\rcreated_after\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\fcreatedAfterJ\x04\b\x03\x10\x04\"\xf3\x01\n" +
	"\fMatchProfile\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12%\n" +
	"\x05pools\x18\x03 \x03(\v2\x0f.openmatch.PoolR\x05pools\x12G\n" +
	"\n" +
	"extensions\x18\x05 \x03(\v2'.openmatch.MatchProfile.ExtensionsEntryR\n" +
	"extensions\x1aS\n" +
	"\x0fExtensionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01J\x04\b\x02\x10\x03J\x04\b\x04\x10\x05\"\xa0\x03\n" +
	"\x05Match\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\tR\amatchId\x12#\n" +
	"\rmatch_profile\x18\x02 \x01(\tR\fmatchProfile\x12%\n" +
	"\x0ematch_function\x18\x03 \x01(\tR\rmatchFunction\x12+\n" +
	"\atickets\x18\x04 \x03(\v2\x11.openmatch.TicketR\atickets\x12@\n" +
	"\n" +
	"extensions\x18\a \x03(\v2 .openmatch.Match.ExtensionsEntryR\n" +
	"extensions\x12/\n" +
	"\bbackfill\x18\b \x01(\v2\x13.openmatch.BackfillR\bbackfill\x12/\n" +
	"\x13allocate_gameserver\x18\t \x01(\bR\x12allocateGameserver\x1aS\n" +
	"\x0fExtensionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01J\x04\b\x05\x10\x06J\x04\b\x06\x10\a\"\xfe\x03\n" +
	"\bBackfill\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12<\n" +
	"\rsearch_fields\x18\x02 \x01(\v2\x17.openmatch.SearchFieldsR\fsearchFields\x12C\n" +
	"\n" +
	"extensions\x18\x03 \x03(\v2#.openmatch.Backfill.ExtensionsEntryR\n" +
	"extensions\x12S\n" +
	"\x10persistent_field\x18\x04 \x03(\v2(.openmatch.Backfill.PersistentFieldEntryR\x0fpersistentField\x12;\n" +
	"\vcreate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12\x1e\n" +
	"\n" +
	"generation\x18\x06 \x01(\x03R\n" +
	"generation\x1aS\n" +
	"\x0fExtensionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01\x1aX\n" +
	"\x14PersistentFieldEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01B.Z open-match.dev/open-match/pkg/pb\xaa\x02\tOpenMatchb\x06proto3"

var (
	file_api_messages_proto_rawDescOnce sync.Once
	file_api_messages_proto_rawDescData []byte
)

func file_api_messages_proto_rawDescGZIP() []byte {
	file_api_messages_proto_rawDescOnce.Do(func() {
		file_api_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_messages_proto_rawDesc), len(file_api_messages_proto_rawDesc)))
	})
	return file_api_messages_proto_rawDescData
}

var file_api_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_api_messages_proto_goTypes = []any{
	(DoubleRangeFilter_Exclude)(0), // 0: openmatch.DoubleRangeFilter.Exclude
	(*Ticket)(nil),                 // 1: openmatch.Ticket
	(*SearchFields)(nil),           // 2: openmatch.SearchFields
	(*Assignment)(nil),             // 3: openmatch.Assignment
	(*DoubleRangeFilter)(nil),      // 4: openmatch.DoubleRangeFilter
	(*StringEqualsFilter)(nil),     // 5: openmatch.StringEqualsFilter
	(*TagPresentFilter)(nil),       // 6: openmatch.TagPresentFilter
	(*Pool)(nil),                   // 7: openmatch.Pool
	(*MatchProfile)(nil),           // 8: openmatch.MatchProfile
	(*Match)(nil),                  // 9: openmatch.Match
	(*Backfill)(nil),               // 10: openmatch.Backfill
	nil,                            // 11: openmatch.Ticket.ExtensionsEntry
	nil,                            // 12: openmatch.Ticket.PersistentFieldEntry
	nil,                            // 13: openmatch.SearchFields.DoubleArgsEntry
	nil,                            // 14: openmatch.SearchFields.StringArgsEntry
	nil,                            // 15: openmatch.Assignment.ExtensionsEntry
	nil,                            // 16: openmatch.MatchProfile.ExtensionsEntry
	nil,                            // 17: openmatch.Match.ExtensionsEntry
	nil,                            // 18: openmatch.Backfill.ExtensionsEntry
	nil,                            // 19: openmatch.Backfill.PersistentFieldEntry
	(*timestamppb.Timestamp)(nil),  // 20: google.protobuf.Timestamp
	(*anypb.Any)(nil),              // 21: google.protobuf.Any
}
var file_api_messages_proto_depIdxs = []int32{
	3,  // 0: openmatch.Ticket.assignment:type_name -> openmatch.Assignment
	2,  // 1: openmatch.Ticket.search_fields:type_name -> openmatch.SearchFields
	11, // 2: openmatch.Ticket.extensions:type_name -> openmatch.Ticket.ExtensionsEntry
	12, // 3: openmatch.Ticket.persistent_field:type_name -> openmatch.Ticket.PersistentFieldEntry
	20, // 4: openmatch.Ticket.create_time:type_name -> google.protobuf.Timestamp
	13, // 5: openmatch.SearchFields.double_args:type_name -> openmatch.SearchFields.DoubleArgsEntry
	14, // 6: openmatch.SearchFields.string_args:type_name -> openmatch.SearchFields.StringArgsEntry
	15, // 7: openmatch.Assignment.extensions:type_name -> openmatch.Assignment.ExtensionsEntry
	0,  // 8: openmatch.DoubleRangeFilter.exclude:type_name -> openmatch.DoubleRangeFilter.Exclude
	4,  // 9: openmatch.Pool.double_range_filters:type_name -> openmatch.DoubleRangeFilter
	5,  // 10: openmatch.Pool.string_equals_filters:type_name -> openmatch.StringEqualsFilter
	6,  // 11: openmatch.Pool.tag_present_filters:type_name -> openmatch.TagPresentFilter
	20, // 12: openmatch.Pool.created_before:type_name -> google.protobuf.Timestamp
	20, // 13: openmatch.Pool.created_after:type_name -> google.protobuf.Timestamp
	7,  // 14: openmatch.MatchProfile.pools:type_name -> openmatch.Pool
	16, // 15: openmatch.MatchProfile.extensions:type_name -> openmatch.MatchProfile.ExtensionsEntry
	1,  // 16: openmatch.Match.tickets:type_name -> openmatch.Ticket
	17, // 17: openmatch.Match.extensions:type_name -> openmatch.Match.ExtensionsEntry
	10, // 18: openmatch.Match.backfill:type_name -> openmatch.Backfill
	2,  // 19: openmatch.Backfill.search_fields:type_name -> openmatch.SearchFields
	18, // 20: openmatch.Backfill.extensions:type_name -> openmatch.Backfill.ExtensionsEntry
	19, // 21: openmatch.Backfill.persistent_field:type_name -> openmatch.Backfill.PersistentFieldEntry
	20, // 22: openmatch.Backfill.create_time:type_name -> google.protobuf.Timestamp
	21, // 23: openmatch.Ticket.ExtensionsEntry.value:type_name -> google.protobuf.Any
	21, // 24: openmatch.Ticket.PersistentFieldEntry.value:type_name -> google.protobuf.Any
	21, // 25: openmatch.Assignment.ExtensionsEntry.value:type_name -> google.protobuf.Any
	21, // 26: openmatch.MatchProfile.ExtensionsEntry.value:type_name -> google.protobuf.Any
	21, // 27: openmatch.Match.ExtensionsEntry.value:type_name -> google.protobuf.Any
	21, // 28: openmatch.Backfill.ExtensionsEntry.value:type_name -> google.protobuf.Any
	21, // 29: openmatch.Backfill.PersistentFieldEntry.value:type_name -> google.protobuf.Any
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_api_messages_proto_init() }
func file_api_messages_proto_init() {
	if File_api_messages_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_messages_proto_rawDesc), len(file_api_messages_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_messages_proto_goTypes,
		DependencyIndexes: file_api_messages_proto_depIdxs,
		EnumInfos:         file_api_messages_proto_enumTypes,
		MessageInfos:      file_api_messages_proto_msgTypes,
	}.Build()
	File_api_messages_proto = out.File
	file_api_messages_proto_goTypes = nil
	file_api_messages_proto_depIdxs = nil
}
